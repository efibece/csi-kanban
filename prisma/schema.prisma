
// Schema otimizado para deploy no Render
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/csi_kanban_mvp/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// === TABELAS DE AUTENTICAÇÃO (NextAuth.js) ===
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isSupervisor  Boolean   @default(false)
  isActive      Boolean   @default(true) // Soft delete
  
  // Relações NextAuth
  accounts      Account[]
  sessions      Session[]
  
  // Auditoria
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Índices para performance
  @@index([email])
  @@index([isActive])
  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
  @@map(name: "verificationtokens")
}

// === TABELAS DO SISTEMA KANBAN ===

// Enum para tipos de sinistro
enum ClaimType {
  AUTO_SIMPLES
  AUTO_COMPLEXO
  RESIDENCIAL
  EMPRESARIAL
  
  @@map("claim_types")
}

// Enum para classificação
enum ClaimClassification {
  VERDE
  AMARELO
  VERMELHO
  
  @@map("claim_classifications")
}

// Enum para colunas do Kanban
enum ClaimColumn {
  NOVOS
  A_CONTACTAR
  AGUARDANDO
  CONCLUIDO
  
  @@map("claim_columns")
}

// Enum para status de documento
enum DocumentStatus {
  PENDENTE
  RECEBIDO
  APROVADO
  REJEITADO
  
  @@map("document_statuses")
}

// Enum para itens do checklist
enum DocumentItem {
  CNH
  DOC_VEICULO
  BO
  FOTOS_VEICULO
  LAUDO_MEDICO
  
  @@map("document_items")
}

// Enum para canal de comunicação
enum EventChannel {
  WHATSAPP
  EMAIL
  SISTEMA
  TELEFONE
  
  @@map("event_channels")
}

// Enum para direção da comunicação
enum EventDirection {
  OUTBOUND
  INBOUND
  
  @@map("event_directions")
}

model Claim {
  id             String              @id @default(cuid())
  number         String              @unique // Formato: SIN2025001
  type           ClaimType
  classification ClaimClassification
  column         ClaimColumn
  
  // Dados do sinistro
  description    String?             @db.Text
  value          Decimal?            @db.Decimal(10, 2) // Valor do sinistro
  priority       Int                 @default(0) // 0=baixa, 1=média, 2=alta
  
  // Relacionamentos
  insuredId      String
  insured        Insured             @relation(fields: [insuredId], references: [id])
  
  // Coleções relacionadas
  documents      Document[]
  events         Event[]
  
  // Token para acesso público (portal do segurado)
  portalToken    String              @unique @default(cuid())
  
  // Controle de estado
  isActive       Boolean             @default(true) // Soft delete
  completedAt    DateTime?           // Data de conclusão
  
  // Auditoria
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Índices para performance
  @@index([number])
  @@index([type, classification])
  @@index([column])
  @@index([insuredId])
  @@index([portalToken])
  @@index([isActive])
  @@index([createdAt])
  @@index([priority])
  @@map(name: "claims")
}

model Insured {
  id        String   @id @default(cuid())
  name      String
  phone     String   // Formato: 5599999999999
  email     String
  taxId     String?  // CPF/CNPJ (pode ser opcional)
  
  // Endereço (opcional no MVP)
  address   String?
  city      String?
  state     String?
  zipCode   String?
  
  // Relacionamentos
  claims    Claim[]
  
  // Controle de estado
  isActive  Boolean  @default(true) // Soft delete
  
  // Auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Índices para performance
  @@index([email])
  @@index([phone])
  @@index([taxId])
  @@index([isActive])
  @@map(name: "insured")
}

model Document {
  id             String         @id @default(cuid())
  claimId        String
  claim          Claim          @relation(fields: [claimId], references: [id], onDelete: Cascade)
  
  // Dados do documento
  item           DocumentItem
  status         DocumentStatus @default(PENDENTE)
  
  // Arquivo anexado
  fileName       String?
  fileUrl        String?        // URL pública (S3, Cloudinary, etc.)
  fileSize       Int?           // Em bytes
  mimeType       String?        // image/jpeg, application/pdf, etc.
  
  // Observações
  note           String?        @db.Text
  rejectionReason String?       @db.Text // Se rejeitado
  
  // Controle de estado
  isActive       Boolean        @default(true)
  
  // Auditoria
  uploadedAt     DateTime?      // Data de upload do arquivo
  reviewedAt     DateTime?      // Data de análise
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Índices para performance
  @@index([claimId])
  @@index([item, status])
  @@index([status])
  @@index([isActive])
  @@map(name: "documents")
}

model Event {
  id        String         @id @default(cuid())
  claimId   String
  claim     Claim          @relation(fields: [claimId], references: [id], onDelete: Cascade)
  
  // Dados da comunicação
  channel   EventChannel
  direction EventDirection
  content   String         @db.Text
  
  // Metadados específicos do canal
  externalId String?       // ID no WhatsApp, email message-id, etc.
  recipient  String?       // Para quem foi enviado (email/phone)
  sender     String?       // Quem enviou (para INBOUND)
  
  // Status de entrega (para OUTBOUND)
  deliveryStatus String?   // "sent", "delivered", "read", "failed"
  deliveredAt    DateTime? // Data de entrega confirmada
  readAt         DateTime? // Data de leitura (WhatsApp)
  
  // Controle de estado
  isActive  Boolean        @default(true)
  
  // Auditoria
  createdAt DateTime       @default(now())

  // Índices para performance
  @@index([claimId])
  @@index([channel, direction])
  @@index([createdAt])
  @@index([externalId])
  @@index([isActive])
  @@map(name: "events")
}

// === TABELA PARA CONFIGURAÇÕES DO SISTEMA ===
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique // "whatsapp_token", "email_config", etc.
  value       String   @db.Text // JSON serializado
  description String?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([isActive])
  @@map(name: "system_configs")
}

// === TABELA PARA LOGS E AUDITORIA ===
model AuditLog {
  id        String   @id @default(cuid())
  
  // Identificação da ação
  action    String   // "create", "update", "delete", "login", etc.
  entity    String   // "claim", "document", "user", etc.
  entityId  String?  // ID do objeto afetado
  
  // Dados da mudança
  oldData   String?  @db.Text // JSON dos dados antigos
  newData   String?  @db.Text // JSON dos dados novos
  
  // Contexto da ação
  userId    String?  // Quem fez a ação
  userEmail String?
  ipAddress String?
  userAgent String? @db.Text
  
  createdAt DateTime @default(now())

  // Índices para performance
  @@index([action])
  @@index([entity, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map(name: "audit_logs")
}


